package FinalExamPrep;

import java.util.*;

public class HeroesOfCodeAndLogic {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());
        Map<String, List<Integer>> heroes = new LinkedHashMap<>();
// {hero name} {HP} {MP}
        for (int i = 0; i < n; i++) {
            String input = scanner.nextLine();
            String name = input.split("\\s+")[0];
            int hp = Integer.parseInt(input.split("\\s+")[1]);
            int mp = Integer.parseInt(input.split("\\s+")[2]);
            heroes.putIfAbsent(name, new ArrayList<>());
            heroes.get(name).add(hp);
            heroes.get(name).add(mp);
        }
        String command = scanner.nextLine();

        while (!command.equals("End")) {

            String action = command.split(" \\- ")[0];
            String heroName = command.split(" \\- ")[1];
            int currentHP = heroes.get(heroName).get(0);
            int currentMP = heroes.get(heroName).get(1);

            switch (action) {
                case "CastSpell":
                    int mpNeeded = Integer.parseInt(command.split(" \\- ")[2]);
                    String spellName = command.split(" \\- ")[3];
                    if (currentMP >= mpNeeded) {
                        currentMP-=mpNeeded;
                        heroes.get(heroName).set(1, currentMP);
                        System.out.printf("%s has successfully cast %s and now has %d MP!%n", heroName, spellName, heroes.get(heroName).get(1));
                    } else {
                        System.out.printf("%s does not have enough MP to cast %s!%n", heroName, spellName);
                    }
                    break;
                case "TakeDamage":
                    int dmg = Integer.parseInt(command.split(" \\- ")[2]);
                    String attacker = command.split(" \\- ")[3];
                    if (currentHP-dmg > 0) {
                        currentHP-=dmg;
                        heroes.get(heroName).set(0,currentHP);
                        System.out.printf("%s was hit for %d HP by %s and now has %d HP left!%n", heroName, dmg, attacker, currentHP);
                    } else {
                        heroes.remove(heroName);
                        System.out.printf("%s has been killed by %s!%n", heroName, attacker);
                    }
                    break;

                case "Recharge":
                    int amount = Integer.parseInt(command.split(" \\- ")[2]);
                    if (currentMP + amount > 200) {
                        amount =200 - currentMP;
                        currentMP =200;
                    } else {
                        currentMP += amount;
                    }
                        heroes.get(heroName).set(1, currentMP);
                        System.out.printf("%s recharged for %d MP!%n", heroName, amount);
                   break;

                case "Heal":
                    int hpAmount = Integer.parseInt(command.split(" \\- ")[2]);
                    if (currentHP + hpAmount > 100) {
                        hpAmount =100 -currentHP;
                        currentHP =100;
                    } else {
                        currentHP += hpAmount;
                    }
                        heroes.get(heroName).set(0, currentHP);
                        System.out.printf("%s healed for %d HP!%n", heroName, hpAmount);
                    break;
            }
            command = scanner.nextLine();
        }

        for (Map.Entry<String, List<Integer>> hero : heroes.entrySet()) {
            System.out.println(hero.getKey());
            System.out.println("  HP: " + hero.getValue().get(0));
            System.out.println("  MP: " + hero.getValue().get(1));
                }

    }
}


